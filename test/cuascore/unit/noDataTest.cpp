#include "fillNoData.h"

#include "CUASArgs.h"
#include "CUASModel.h"
#include "CUASSolver.h"

#include "gtest/gtest.h"

#include <memory>

int mpiRank;
int mpiSize;

/*TEST(noDataTest, solverComparison) {
  auto pmodel = fillNoData();
  auto &model = *pmodel;
  model.init();

  CUAS::CUASArgs args;
  int argc = 1;
  char arg0[] = "test";
  char *argv[1] = {arg0};
  CUAS::parseArgs(argc, argv, args);

  setup(model, args);

  // int Nt = 7300;
  int Nt = 7300;
  PetscScalar totaltime_secs = 1.0;
  PetscScalar dt_secs = 43200;

  auto uG = std::make_unique<PETScGrid>(model.Ncols, model.Nrows);    // unknown u at new time level
  auto u_nG = std::make_unique<PETScGrid>(model.Ncols, model.Nrows);  // u at the previous time level

  solve(uG, u_nG, model, Nt, args, totaltime_secs, dt_secs);

  // from python:

  double u[10][20] = {
      {1820, 1729, 1638, 1547, 1456., 1365, 1274, 1183, 1092, 1001., 910, 819, 728, 637, 546., 455, 364, 273, 182, 91},
      {1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
       114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
       103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91},
      {
          1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
          114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
          103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91,
      },
      {
          1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
          114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
          103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91,
      },
      {
          1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
          114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
          103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91,
      },
      {
          1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
          114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
          103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91,
      },
      {
          1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
          114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
          103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91,
      },
      {
          1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
          114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
          103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91,
      },
      {
          1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
          114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
          103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91,
      },
      {1820, 1729, 1638, 1547, 1456., 1365, 1274, 1183, 1092, 1001., 910, 819, 728, 637, 546., 455, 364, 273, 182, 91},
  };

  double u_n[10][20] = {
      {1820, 1729, 1638, 1547, 1456., 1365, 1274, 1183, 1092, 1001., 910, 819, 728, 637, 546., 455, 364, 273, 182, 91},
      {1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
       114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
       103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91},
      {1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
       114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
       103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91},
      {1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
       114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
       103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91},
      {1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
       114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
       103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91},
      {1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
       114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
       103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91},
      {1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
       114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
       103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91},
      {1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
       114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
       103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91},
      {1820,         118.1084418, 117.9499129,  117.6328551, 117.15726842, 116.5231528, 115.7305083,
       114.7793349,  113.6696326, 112.40140144, 110.9746413, 109.3893523,  107.6455344, 105.7431876,
       103.68231196, 101.4629073, 99.0849738,   96.5485114,  93.8535201,   91},
      {1820, 1729, 1638, 1547, 1456., 1365, 1274, 1183, 1092, 1001., 910, 819, 728, 637, 546., 455, 364, 273, 182, 91}};

  PETScGrid uPy(20, 10);
  PETScGrid u_nPy(20, 10);
  {
    auto uPyH = uPy.getWriteHandle();
    auto u_nPyH = u_nPy.getWriteHandle();

    int cornerX = uPy.getCornerX();
    int cornerY = uPy.getCornerY();
    for (int i = 0; i < uPy.getLocalNumOfRows(); ++i) {
      for (int j = 0; j < uPy.getLocalNumOfCols(); ++j) {
        uPyH(i, j) = u[cornerY + i][cornerX + j];
        u_nPyH(i, j) = u_n[cornerY + i][cornerX + j];
      }
    }
  }

  auto &uPyRH = uPy.getReadHandle();
  auto &u_nPyRH = u_nPy.getReadHandle();

  // auto uGlob = uG->getAsGlobal2dArr();
  auto &uGRH = uG->getReadHandle();
  auto &u_nGRH = u_nG->getReadHandle();
  for (int i = 0; i < model.usurf->getLocalNumOfRows(); ++i) {
    for (int j = 0; j < model.usurf->getLocalNumOfCols(); ++j) {
      ASSERT_NEAR(uGRH(i, j), uPyRH(i, j), 0.6);
      ASSERT_NEAR(u_nGRH(i, j), u_nPyRH(i, j), 0.6);
    }
  }
}

TEST(noDataTest, compareModelToPython) {
  // ASSERT_EQ(mpiSize, MPI_SIZE);

  auto pmodel = fillNoData();
  auto &model = *pmodel;
  model.init();

  ASSERT_EQ(model.dx, 1000.0);
  double usurf[10][20] = {{2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0, 1200.0, 1100.0,
                           1000.0, 900.0,  800.0,  700.0,  600.0,  500.0,  400.0,  300.0,  200.0,  100.0},
                          {2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0, 1200.0, 1100.0,
                           1000.0, 900.0,  800.0,  700.0,  600.0,  500.0,  400.0,  300.0,  200.0,  100.0},
                          {2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0, 1200.0, 1100.0,
                           1000.0, 900.0,  800.0,  700.0,  600.0,  500.0,  400.0,  300.0,  200.0,  100.0},
                          {2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0, 1200.0, 1100.0,
                           1000.0, 900.0,  800.0,  700.0,  600.0,  500.0,  400.0,  300.0,  200.0,  100.0},
                          {2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0, 1200.0, 1100.0,
                           1000.0, 900.0,  800.0,  700.0,  600.0,  500.0,  400.0,  300.0,  200.0,  100.0},
                          {2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0, 1200.0, 1100.0,
                           1000.0, 900.0,  800.0,  700.0,  600.0,  500.0,  400.0,  300.0,  200.0,  100.0},
                          {2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0, 1200.0, 1100.0,
                           1000.0, 900.0,  800.0,  700.0,  600.0,  500.0,  400.0,  300.0,  200.0,  100.0},
                          {2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0, 1200.0, 1100.0,
                           1000.0, 900.0,  800.0,  700.0,  600.0,  500.0,  400.0,  300.0,  200.0,  100.0},
                          {2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0, 1200.0, 1100.0,
                           1000.0, 900.0,  800.0,  700.0,  600.0,  500.0,  400.0,  300.0,  200.0,  100.0},
                          {2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0, 1200.0, 1100.0,
                           1000.0, 900.0,  800.0,  700.0,  600.0,  500.0,  400.0,  300.0,  200.0,  100.0}};

  double bnd_mask[10][20] = {
      {2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0},
      {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
      {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
      {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
      {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
      {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
      {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
      {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
      {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
      {2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0}};

  double p_ice[10][20] = {{17854200.0, 16961490.0, 16068780.0, 15176070.0, 14283360.0, 13390650.0, 12497940.0,
                           11605230.0, 10712520.0, 9819810.0,  8927100.0,  8034390.0,  7141680.0,  6248970.0,
                           5356260.0,  4463550.0,  3570840.0,  2678130.0,  1785420.0,  892710.0},
                          {17854200.0, 16961490.0, 16068780.0, 15176070.0, 14283360.0, 13390650.0, 12497940.0,
                           11605230.0, 10712520.0, 9819810.0,  8927100.0,  8034390.0,  7141680.0,  6248970.0,
                           5356260.0,  4463550.0,  3570840.0,  2678130.0,  1785420.0,  892710.0},
                          {17854200.0, 16961490.0, 16068780.0, 15176070.0, 14283360.0, 13390650.0, 12497940.0,
                           11605230.0, 10712520.0, 9819810.0,  8927100.0,  8034390.0,  7141680.0,  6248970.0,
                           5356260.0,  4463550.0,  3570840.0,  2678130.0,  1785420.0,  892710.0},
                          {17854200.0, 16961490.0, 16068780.0, 15176070.0, 14283360.0, 13390650.0, 12497940.0,
                           11605230.0, 10712520.0, 9819810.0,  8927100.0,  8034390.0,  7141680.0,  6248970.0,
                           5356260.0,  4463550.0,  3570840.0,  2678130.0,  1785420.0,  892710.0},
                          {17854200.0, 16961490.0, 16068780.0, 15176070.0, 14283360.0, 13390650.0, 12497940.0,
                           11605230.0, 10712520.0, 9819810.0,  8927100.0,  8034390.0,  7141680.0,  6248970.0,
                           5356260.0,  4463550.0,  3570840.0,  2678130.0,  1785420.0,  892710.0},
                          {17854200.0, 16961490.0, 16068780.0, 15176070.0, 14283360.0, 13390650.0, 12497940.0,
                           11605230.0, 10712520.0, 9819810.0,  8927100.0,  8034390.0,  7141680.0,  6248970.0,
                           5356260.0,  4463550.0,  3570840.0,  2678130.0,  1785420.0,  892710.0},
                          {17854200.0, 16961490.0, 16068780.0, 15176070.0, 14283360.0, 13390650.0, 12497940.0,
                           11605230.0, 10712520.0, 9819810.0,  8927100.0,  8034390.0,  7141680.0,  6248970.0,
                           5356260.0,  4463550.0,  3570840.0,  2678130.0,  1785420.0,  892710.0},
                          {17854200.0, 16961490.0, 16068780.0, 15176070.0, 14283360.0, 13390650.0, 12497940.0,
                           11605230.0, 10712520.0, 9819810.0,  8927100.0,  8034390.0,  7141680.0,  6248970.0,
                           5356260.0,  4463550.0,  3570840.0,  2678130.0,  1785420.0,  892710.0},
                          {17854200.0, 16961490.0, 16068780.0, 15176070.0, 14283360.0, 13390650.0, 12497940.0,
                           11605230.0, 10712520.0, 9819810.0,  8927100.0,  8034390.0,  7141680.0,  6248970.0,
                           5356260.0,  4463550.0,  3570840.0,  2678130.0,  1785420.0,  892710.0},
                          {17854200.0, 16961490.0, 16068780.0, 15176070.0, 14283360.0, 13390650.0, 12497940.0,
                           11605230.0, 10712520.0, 9819810.0,  8927100.0,  8034390.0,  7141680.0,  6248970.0,
                           5356260.0,  4463550.0,  3570840.0,  2678130.0,  1785420.0,  892710.0}};

  // fill topg with only 0.
  std::vector<std::vector<double>> topg(10, std::vector<double>(20, 0.0));

  // fill with ones
  std::vector<std::vector<double>> bmelt(10, std::vector<double>(20, 1.0));

  PETScGrid usurfPy(20, 10);
  PETScGrid topgPy(20, 10);
  PETScGrid thkPy(20, 10);
  PETScGrid p_icePy(20, 10);
  PETScGrid bndPy(20, 10);
  PETScGrid QPy(20, 10);
  {
    auto usurfPy2d = usurfPy.getWriteHandle();
    auto topgPy2d = topgPy.getWriteHandle();
    auto p_icePy2d = p_icePy.getWriteHandle();
    auto bndPy2d = bndPy.getWriteHandle();
    auto QPy2d = QPy.getWriteHandle();

    int cornerX = usurfPy.getCornerX();
    int cornerY = usurfPy.getCornerY();
    // fill up py grids to compare with mpi
    for (int i = 0; i < usurfPy.getLocalNumOfRows(); ++i) {
      for (int j = 0; j < usurfPy.getLocalNumOfCols(); ++j) {
        usurfPy2d(i, j) = usurf[cornerY + i][cornerX + j];
        topgPy2d(i, j) = topg[cornerY + i][cornerX + j];
        p_icePy2d(i, j) = p_ice[cornerY + i][cornerX + j];
        bndPy2d(i, j) = bnd_mask[cornerY + i][cornerX + j];
        QPy2d(i, j) = bmelt[cornerY + i][cornerX + j];
      }
    }
  }

  auto &usurfPy2d = usurfPy.getReadHandle();
  auto &topgPy2d = topgPy.getReadHandle();
  auto &p_icePy2d = p_icePy.getReadHandle();
  auto &bndPy2d = bndPy.getReadHandle();
  auto &QPy2d = QPy.getReadHandle();

  auto &usurfGlob = model.usurf->getReadHandle();
  for (int i = 0; i < model.usurf->getLocalNumOfRows(); ++i) {
    for (int j = 0; j < model.usurf->getLocalNumOfCols(); ++j) {
      ASSERT_EQ(usurfGlob(i, j), usurfPy2d(i, j));
    }
  }

  auto &topgGlob = model.topg->getReadHandle();
  for (int i = 0; i < model.topg->getLocalNumOfRows(); ++i) {
    for (int j = 0; j < model.topg->getLocalNumOfCols(); ++j) {
      ASSERT_EQ(topgGlob(i, j), topgPy2d(i, j));
    }
  }

  // thk is the same as usurf
  auto &thkGlob = model.thk->getReadHandle();
  for (int i = 0; i < model.thk->getLocalNumOfRows(); ++i) {
    for (int j = 0; j < model.thk->getLocalNumOfCols(); ++j) {
    }
  }

  auto &p_iceGlob = model.pIce->getReadHandle();
  for (int i = 0; i < model.pIce->getLocalNumOfRows(); ++i) {
    for (int j = 0; j < model.pIce->getLocalNumOfCols(); ++j) {
      ASSERT_EQ(p_iceGlob(i, j), p_icePy2d(i, j));
    }
  }

  auto &bndGlob = model.bndMask->getReadHandle();
  for (int i = 0; i < model.bndMask->getLocalNumOfRows(); ++i) {
    for (int j = 0; j < model.bndMask->getLocalNumOfCols(); ++j) {
      ASSERT_EQ(bndGlob(i, j), bndPy2d(i, j));
    }
  }

  auto &QGlob = model.Q->getReadHandle();
  for (int i = 0; i < model.Q->getLocalNumOfRows(); ++i) {
    for (int j = 0; j < model.Q->getLocalNumOfCols(); ++j) {
      ASSERT_EQ(QGlob(i, j), QPy2d(i, j));
    }
  }
}*/

int main(int argc, char *argv[]) {
  ::testing::InitGoogleTest(&argc, argv);
  PetscInitialize(&argc, &argv, nullptr, nullptr);
  MPI_Comm_size(PETSC_COMM_WORLD, &mpiSize);
  MPI_Comm_rank(PETSC_COMM_WORLD, &mpiRank);
  int result = RUN_ALL_TESTS();
  PetscFinalize();
  return result;
}
